///////////////////////////////////////////////////////////
//  Allocator.cs
//  Implementation of the Class Allocator
//  Generated by Enterprise Architect
//  Created on:      2014/08/05 9:05:17
//  Original author: shiba
///////////////////////////////////////////////////////////

using System.Collections.Generic;
namespace AttendeeAllocator {
	public class Allocator {

        private AttendeeInfo _attendee;
        private GroupInfo _groups;
        private List<Group> _ListWorkGroup;
        private List<Compartment> _ListWorkCompartment;
        private CompartmentInfo _compartmentInfo;
        private List<string> _errormessages;
        private List<Member> _ListMemberMaster;

		public Allocator(){

		}

        /// <summary>
        /// 引数付きコンストラクタ
        /// </summary>
        /// <param name="att">名簿</param>
        /// <param name="grp">グループ定義</param>
        /// <param name="cmp">区画定義</param>
        public Allocator(AttendeeInfo att, GroupInfo grp, CompartmentInfo cmp)
        {
            _attendee = att;
            _groups = grp;
            _compartmentInfo = cmp;
            _errormessages = new List<string>();
            _ListWorkGroup = new List<Group>();
            _ListWorkCompartment = new List<Compartment>();
            _ListMemberMaster = new List<Member>();
        }

		~Allocator(){

		}

		public virtual void Dispose(){

		}
        //------------------------
        //Method
        //------------------------
        /// <summary>
        /// ソースとなるデータの内容確認
        /// </summary>
        /// <returns></returns>
        public bool CheckSourceData()
        {
            bool totalResult = false;
            //個別確認
            bool[] result = new bool[6];
            for (int i = 0; i < result.Length; i++) { result[i] = false; }

                result[0] = _attendee.CheckComformance();
            result[1] = _groups.CheckComformance();
            result[2] = _compartmentInfo.CheckComformance();

            totalResult = result[0] && result[1] && result[2];

            if (totalResult == true)
            {
                //複合検査
                //グループ定義にあるグループが一つ以上名簿の項目になっているか？
                result[3] = CheckGroupInAttendee();
                if (result[3] == false)
                {
                    //[警告]
                    _errormessages.Add("[警告]名簿にグループ定義が一つも使用されていません。");
                    
                }

                //区画に優先グループが定義されているとき、そのグループはグループ定義されているか？
                result[4] = CheckGroupInCompartment();

                //レイアウト項目の存在確認
                result[5] = CheckLayoutItem(_attendee);


            }
            totalResult = result[3] && result[4] && result[5];

            return totalResult;

        }

        /// <summary>
        /// 名簿内で使われているグループ名の調査
        /// </summary>
        /// <returns></returns>
        private bool CheckGroupInAttendee()
        {
            bool result = false;
            //名簿のタイトル行取り出し
            string[] attendeeTitles = _attendee.Rows[0];

            //グループ定義の取り出し（先頭行は見出しなので読み飛ばす）
            for (int i = 1; i < _groups.Rows.Count; i++)
            {
                //各行のデータ取り出し
                string[] row = _groups.Rows[i];
                //グループ名取得
                string groupName = row[(int)GroupInfo.COLUM_POS.Name];
                //名簿の項目名を順番に確認
                foreach (string title in attendeeTitles)
                {
                    //一つでも使われていればOK
                    if (title == groupName)
                    {
                        result = true;
                        break;
                    }
                }

            }
            return result;
        }

        /// <summary>
        /// 区画定義内で使用されているグループ名の調査
        /// </summary>
        /// <returns></returns>
        private bool CheckGroupInCompartment()
        {
            bool totalResult = true;

            //区画定義の内容をチェック（先頭は見出しなのでよみとばす）
            for (int i = 1; i < _compartmentInfo.Rows.Count; i++)
            {
                //1行取り出し
                string[] compartmentRow = _compartmentInfo.Rows[i];
                //優先グループを取り出し
                string priorityGroup = compartmentRow[(int)CompartmentInfo.COLUM_POS.PriorityGroup];

                //優先グループ定義がある場合
                if (priorityGroup != "")
                {
                    //グループ定義から検索
                    string[] group = _groups.FindGroupByName(priorityGroup);
                    if (group == null)
                    {
                        //[エラー]
                        _errormessages.Add(string.Format("[エラー]区画定義の区画優先度項目で使用されているグループ名:\"{0}\"はグループ定義にて定義されていません。", priorityGroup));
                        totalResult = false;
                    }
                }


            }
            return totalResult;
        }

        /// <summary>
        /// 名簿にレイアウト用項目が設定されているか確認する
        /// レイアウト用項目は先頭が *(アスタリスク）
        /// </summary>
        /// <param name="att"></param>
        /// <returns></returns>
        public bool CheckLayoutItem( AttendeeInfo att)
        {
            if (att.Rows.Count > 0) { 
                string[] titleRow = att.Rows[0];
                foreach (string title in titleRow)
                {
                    if( title != ""){
                        if (title[0] == '*')
                        {
                            return true;
                        }

                    }
                }
            }

            return false;

        }

        /// <summary>
        /// 作業用グループリスト作成
        /// </summary>
        public void BuildWorkGroup()
        {
            //現在保持しているリストを初期化
            _ListWorkGroup = new List<Group>();
            _ListMemberMaster = new List<Member>();

            for(int j = 1; j < _groups.Rows.Count; j++)
            {
                string[] tmpGroupData = _groups.Rows[j];
                Group tmpGroup = new Group(tmpGroupData);

                //参加者CSVデータのどの列ががこのグループに関するものかを判断
                int groupIndex = _attendee.FindNameFromTitle(tmpGroup.Name);
                if (groupIndex == -1)
                {
                    //名簿にグループに関する列が無い
                    _errormessages.Add(string.Format("[警告]名簿にグループ[{0}]に関する列がありませんでした。", tmpGroup.Name));
                }
                else
                {
                    //参加者CSVデータからGroup毎にメンバーを収集
                    for(int i = 1; i < _attendee.Rows.Count; i++)
                    {
                        string[] att = _attendee.Rows[i];

                        //メンバーマスターに登録済みのメンバーか確認
                        Member tmpMember = FindFromMemberMasterByKey(att[0]);

                        if (tmpMember == null)
                        { 
                            tmpMember = new Member(att);

                            //メンバーマスターに新規メンバー追加
                            _ListMemberMaster.Add(tmpMember);
                        }


                        if (att[groupIndex] == "TRUE")
                        {
                            //グループにメンバー追加
                            tmpGroup.AddMember(tmpMember);

                            //メンバーの所属グループリストに情報追加
                            tmpMember.ListGroup.Add(tmpGroup);
                        }
                    }
                    if (tmpGroup.Member.Count > 0)
                    {
                        _ListWorkGroup.Add(tmpGroup);

                    }
                }
            }



            //最後にどのグループにも属さない人のグループを作成
            Group other = new Group("どのグループにも所属しない");
            other.Priority = 99;
            for (int i = 1; i < _attendee.Rows.Count; i++)
            {
                string[] att = _attendee.Rows[i];

                //メンバーマスターに登録済みのメンバーか確認
                Member tmpMember = FindFromMemberMasterByKey(att[0]);
                if (tmpMember == null)
                {
                    tmpMember = new Member(att);
                }

                //全てのグループからグループに所属しているか調べる
                if (IsAnyGroupMember(att[0]) == false)
                {
                    //メンバーマスターに新規メンバー追加
                    _ListMemberMaster.Add(tmpMember);

                    other.AddMember(tmpMember);
                    tmpMember.ListGroup.Add(other);

                }
            }
            if (other.Member.Count > 0)
            {
                _ListWorkGroup.Add(other);
            }

            //優先度順にソート
            SortByPriority();

        }

        /// <summary>
        /// メンバーマスターからKeyを用いてメンバーを探す
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private Member FindFromMemberMasterByKey(string key)
        {
            foreach( Member mem in _ListMemberMaster)
            {
                if (mem.Key == key)
                {
                    return mem;
                }
            }
            return null;
        }

        /// <summary>
        /// 作業用区画作成
        /// </summary>
        public void BuildWorkCompartment()
        {
            //現在保持しているリストを初期化
            _ListWorkCompartment = new List<Compartment>();

            //区画情報から作業用区画作成
            for (int j = 1; j < _compartmentInfo.Rows.Count; j++)
            {
                string[] tmpCompartmentData = _compartmentInfo.Rows[j];
                Compartment tmpCompartment = new Compartment(tmpCompartmentData);
                if (tmpCompartment.Name != "")
                {
                    _ListWorkCompartment.Add(tmpCompartment);
                }
            }

        }

        /// <summary>
        /// エラーメッセージクリア
        /// </summary>
        public void ClearErrorMessages()
        {
            _errormessages = new List<string>();
        }

        private bool IsAnyGroupMember(string key)
        {
            //全てのグループからグループに所属しているか調べる
            bool result = false;
            foreach( Group tmpGroup in _ListWorkGroup)
            {
                if (tmpGroup.IsGroupMember(key) == true)
                {
                    result = true;
                    return result;
                }
            }
            return result;
        }

        /// <summary>
        /// 優先度順にソート
        /// </summary>
        public void SortByPriority()
        {
            _ListWorkGroup.Sort((a, b) => a.Priority - b.Priority);
        }


        public void AllocateByLogic1()
        {
            //グループ毎に処理する
            foreach (Group tmpGroup in _ListWorkGroup)
            {
                //割り当て実行
                tmpGroup.AllocateMemberToCompartment(_ListWorkCompartment);
                foreach( string error in tmpGroup.ErrorMessages)
                {
                    _errormessages.Add(error);
                }
            }
            //全てのグループの割り当ての試みが終わった段階で、最終確認を行う
            int remainCount = GetNotAllocatedRemainmemberCount(_ListMemberMaster);

            _errormessages.Add("\r\n\r\n");
            _errormessages.Add("[割り当て結果]========================================");

            //割り当てられていない人がいる
            if (remainCount > 0)
            {
                foreach (Member m in _ListMemberMaster)
                {
                    if (IsExcludeMember(m) == false)
                    {
                        if (m.IsAllocated == false)
                        {
                            _errormessages.Add(string.Format("[エラー]キーコード{0}は区画へ割り当てられませんでした。", m.Key));
                        }
                    }
                }

            }

        }

        /// <summary>
        /// メンバーが割り当て除外グループに所属しているかしらべる
        /// </summary>
        /// <param name="m"></param>
        /// <returns></returns>
        private bool IsExcludeMember(Member m)
        {
            bool result = false;
            foreach (Group g in m.ListGroup)
            {
                if (g.Exclude == true)
                {
                    result = true;
                    break;
                }
            }
            return result;
        }


        /// <summary>
        /// 割り当てられていないメンバー数を算出
        /// </summary>
        /// <param name="listMember"></param>
        /// <returns></returns>
        private int GetNotAllocatedRemainmemberCount(List<Member> listMember)
        {
            int result = 0;
            foreach (Member mem in listMember)
            {
                if (mem.IsAllocated == false)
                {
                    result++;
                }
            }
            return result;
        }

        //------------------------
        //Properties
        //------------------------
        public List<string> ErrorMessages
        {
            get { return _errormessages; }
        }

        public List<Compartment> ListCompartment
        {
            get { return _ListWorkCompartment; }
        }
        public List<Member> ListMemberMaster
        {
            get { return _ListMemberMaster; }
        }

	}//end Allocator

}//end namespace SWESTAttendeeAllocator